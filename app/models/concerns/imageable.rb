module Imageable
  extend ActiveSupport::Concern

  class_methods do
    def has_images(relation_name, **kwargs, &block)
      has_many relation_name, as: :imageable, class_name: 'Image', dependent: :destroy

      # this creates an has_one_attached relation, specific to this call of
      # has_images, to which attachment options will be set. This allows to
      # have distinct options set per call
      image_attachment = "#{name.downcase}_#{relation_name.to_s.singularize}".to_sym
      Image.has_one_attached image_attachment, **kwargs, &block

      accepts_nested_attributes_for relation_name

      # We override attribute writers generated by `has_many` and `accepts_nested_attributes_for`
      # to force the correct name attribute on Image
      class_eval <<-CODE, __FILE__, __LINE__ + 1
        def #{relation_name}=(images)
          super(images.map {|image|
            image.name = "#{image_attachment}"
            image
          })
        end

        def #{relation_name}_attributes=(attrs)
          super(attrs.transform_values {|image_attrs|
            {name: "#{image_attachment}"}.merge!(image_attrs)
          })
        end
      CODE
    end
  end
end
